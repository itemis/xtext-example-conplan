/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.conPlan.ui.labeling

import com.google.inject.Inject
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider
import org.xtext.example.conPlan.conPlan.Feature
import org.xtext.example.conPlan.conPlan.SType
import org.xtext.example.conPlan.conPlan.Track
import org.xtext.example.conPlan.conPlan.Level
import org.xtext.example.conPlan.conPlan.FeatureTypes
import org.xtext.example.conPlan.conPlan.Domainobjects
import org.xtext.example.conPlan.conPlan.Talks
import org.xtext.example.conPlan.conPlan.Rooms
import org.xtext.example.conPlan.conPlan.Features
import org.xtext.example.conPlan.conPlan.Speakers
import org.xtext.example.conPlan.conPlan.Type
import org.xtext.example.conPlan.conPlan.Tracks
import org.xtext.example.conPlan.conPlan.Levels
import org.xtext.example.conPlan.conPlan.Conference
import org.xtext.example.conPlan.conPlan.ConferenceDay
import org.xtext.example.conPlan.conPlan.Slot

/**
 * Provides labels for EObjects.
 * 
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#label-provider
 */
class ConPlanLabelProvider extends DefaultEObjectLabelProvider {
	// Labels and icons can be computed like this:
	@Inject extension FeatureTypeRepresentation
	@Inject extension RuleRepresentation 
	
	@Inject
	new(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}

	def text(Feature f){
		f.name
		+
			if(f.type !== null)
				" : " + f.type.representation
			else " "
	}
	
	def text (Domainobjects m){m.setName}
	
	def text (Features f){f.setName}
	
	def text (ConferenceDay day){
//		"Day: "+
		day.month+", "+day.day+" "+day.year
	}
	
	def text(Conference conference){
		"Conference: "+ conference.name
	}
	
	def text(Slot s){
//		"Slot"+
//			if(!(s.name===null))
//				": "+s.name
//			else " "
		s.startHour+":"+s.startMin+" - "+s.endHour+":"+s.endMin
	}

}

class RuleRepresentation {
	def setName(Domainobjects m){
		var String oName
		switch(m){
//			Talks : oName = "Talk (" +m.name +")"
			Talks : oName =  m.name + "("+m.speaker+")"
			Rooms : oName = "Rooms"
			Speakers : oName = "Speaker ("+m.speaker+")"
		}
	}
}

class FeatureTypeRepresentation {
	def representation(FeatureTypes t){
//		val elementType = f.type
		switch(t) {
				SType : t.name
				Track : t.name
				Level : t.name
		}
	}
	def setName(Features f){
		var String fName
		switch(f){
			Type : fName = "Session Types"
			Tracks : fName = "Tracks"
			Levels : fName = "Levels"
			FeatureTypes : f.representation
		}
	}
}
