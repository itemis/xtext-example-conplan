/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.conPlan.ui.outline

import org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider
import org.eclipse.xtext.ui.editor.outline.impl.DocumentRootNode
import org.xtext.example.conPlan.conPlan.Model
import com.google.inject.Inject
import org.eclipse.xtext.ui.label.StylerFactory
import org.eclipse.xtext.ui.IImageHelper
import org.eclipse.swt.graphics.Image
import org.xtext.example.conPlan.conPlan.Room
import org.xtext.example.conPlan.conPlan.FeatureTypes
import org.xtext.example.conPlan.conPlan.Features
import org.xtext.example.conPlan.conPlan.Rooms
import org.xtext.example.conPlan.conPlan.Feature
import org.xtext.example.conPlan.conPlan.Talks

/**
 * Customization of the default outline structure.
 *
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#outline
 */
class ConPlanOutlineTreeProvider extends DefaultOutlineTreeProvider {
	@Inject private StylerFactory styler;
	@Inject private IImageHelper image;
	
	def _isLeaf(Features f){true}
	def _isLeaf(Talks f){true}
	def _isLeaf(Rooms r){true}
	
	def void _createChildren(DocumentRootNode outlineNode,Model model){		
		model.objects.forEach[object|
			createNode(outlineNode,object);
		]
		model.conference.forEach[object|
			createNode(outlineNode,object);
		]
//		for(Domainobjects object : model.objects ){
//			createNode(node,object);
//		}
//		for(Conference con : model.conference){
//			createNode(node,con);
//		}
	}
//	 def Image _image(Room room){
//	 	return image.getImage("")
//	 }
	
	
	
	
//	def void _createChildren(DocumentRootNode outlineNode,Slot slot){
//		slot.roomstalks.forEach[object|
//			createNode(outlineNode,object);
//		]
//	}
	
}
