/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.conPlan.ui.quickfix

import org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider
import static extension org.eclipse.xtext.EcoreUtil2.*
import org.xtext.example.conPlan.validation.ConPlanValidator
import org.eclipse.xtext.ui.editor.quickfix.Fix
import org.eclipse.xtext.validation.Issue
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor
import org.xtext.example.conPlan.conPlan.RoomsTalks
import org.xtext.example.conPlan.conPlan.Talks
import org.eclipse.xtext.ui.editor.quickfix.Fixes
import org.xtext.example.conPlan.conPlan.Room
import org.xtext.example.conPlan.conPlan.Slot

/**
 * Custom quickfixes.
 *
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#quick-fixes
 */
class ConPlanQuickfixProvider extends DefaultQuickfixProvider {

//	@Fix(ConPlanValidator.INVALID_NAME)
//	def capitalizeName(Issue issue, IssueResolutionAcceptor acceptor) {
//		acceptor.accept(issue, 'Capitalize name', 'Capitalize the name.', 'upcase.png') [
//			context |
//			val xtextDocument = context.xtextDocument
//			val firstLetter = xtextDocument.get(issue.offset, 1)
//			xtextDocument.replace(issue.offset, 1, firstLetter.toUpperCase)
//		]
//	}
	@Fix(ConPlanValidator.TALK_ASSIGNED_TWICE)
	def void noTalkTwiceAssigned(Issue issue,IssueResolutionAcceptor acceptor){
		acceptor.accept(issue,
			"Talk already assigned",
			"Remove talk" +issue.data.get(0),
			null, //icon
			[ element , context|  
				(element as RoomsTalks).talk.name
				
//			(element as RoomsTalks).talks.name = null; // does not work=> roomsTalks has no access to talk's name, grammar has to be changed
			]
		);
	}
	@Fix(ConPlanValidator.ROOM_ASSIGNED_TWICE)
	def void noRoomTwiceAssigned(Issue issue, IssueResolutionAcceptor acceptor){
		acceptor.accept(issue,
			"Room already assigned",
			'''Remove room '«issue.data.get(0)»' ''',
			null,
			[ element , context |
//				(element as RoomsTalks).room.name = issue.data.get(0).toString
//				element.delete
				(element as RoomsTalks).getAllContentsOfType(Room)
				element.remove
//				val currentroomtalk = element.getContainerOfType(RoomsTalks)
//				val room = currentroomtalk.eContainer as Room
//				room.delete
			]			
		)
	}
	
//	@Fixes(@Fix(ConPlanValidator.ROOM_ASSIGNED_TWICE),@Fix(ConPlanValidator.TALK_ASSIGNED_TWICE))
//	def void noRoomTalkTwiceAssigned(Issue issue, IssueResolutionAcceptor acceptor){
//		acceptor.accept(issue,
//			"Roomtalk twice assigned",
//			'''Remove this RoomTalk'«issue.data.get(0)»' ''',
//			null,
//			[ element , context |
//				(element as RoomsTalks).delete;
//			]			
//		)
//	}
	//2. Variant: replace element





}
