/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.conPlan.validation

import org.eclipse.xtext.validation.Check
import org.xtext.example.conPlan.conPlan.Slot
import org.xtext.example.conPlan.conPlan.RoomsTalks
import org.xtext.example.conPlan.conPlan.ConPlanPackage
import org.eclipse.xtext.EcoreUtil2
import org.xtext.example.conPlan.conPlan.Conference

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class ConPlanValidator extends AbstractConPlanValidator {
	protected static val ISSUE_CODE_PREFIX ="org.xtext.example.conPlan";
	
	public static val TALK_ASSIGNED_TWICE = ISSUE_CODE_PREFIX +"NoTalkTwiceAssigned";
	public static val ROOM_ASSIGNED_TWICE = ISSUE_CODE_PREFIX + "NoRoomTwiceAssigned";
	public static val INVALID_NAME = 'invalidName';
//
//	@Check
//	def checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.name.charAt(0))) {
//			warning('Name should start with a capital', 
//					ConPlanPackage.Literals.GREETING__NAME,
//					INVALID_NAME)
//		}
//	}
	
	// TODO: 
	// - Check that all talks are scheduled => WARN
	// - No talk assigned twice => ERROR => ComposedChecks
	// - No room assigned twice in a slot => ERROR
//
	@Check
	def noTalkTwiceAssigned(Conference conference) {
		val visitedTalks = newHashSet
		val allRoomTalks = EcoreUtil2.eAllOfType(conference,RoomsTalks)
		//val allTalks = allRoomTalks.map[talk]
		
		for (roomTalk: allRoomTalks) {
			if (!visitedTalks.add(roomTalk.talk)) {
				error('Talk already assigned ',
					roomTalk,
				ConPlanPackage.eINSTANCE.roomsTalks_Talk,
				TALK_ASSIGNED_TWICE,
				roomTalk.talk.name)
				
			}
			//visitedTalks.add(talk)
		}
	}
	
	@Check
	def roomsValidator(Slot slot){		
		//Room can't be twice assigned in slot
		val visitedRooms = newHashSet
		val allRoomTalks= EcoreUtil2.eAllOfType(slot, RoomsTalks) 
		
		for(roomTalk: allRoomTalks){
			if(!visitedRooms.add(roomTalk.room)){
				error('Room already assigned',
					roomTalk,
					ConPlanPackage.eINSTANCE.roomsTalks_Room,
					ROOM_ASSIGNED_TWICE,
					roomTalk.room.name)
			}
		}
		
		//Slot can't contain more than 4 rooms => don't need it	
	}
	
	//check if a room isn't occupied
//	@Check
//	def roomNotOccupied(Slot slot){
//		val allRoomTalks = EcoreUtil2.eAllOfType(slot, RoomsTalks)
//		
//		if(allRoomTalks.size<4){
//				warning(4-allRoomTalks.size+' rooms are not occupied',
//					ConPlanPackage.eINSTANCE.slot_StartHour
//				)
//		}
//			
//	}
	
}
