/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.conPlan.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.conPlan.conPlan.RoomsTalks
import org.xtext.example.conPlan.conPlan.Slot
import org.eclipse.xtext.EcoreUtil2
import org.xtext.example.conPlan.conPlan.Speaker
import org.xtext.example.conPlan.conPlan.Talks
import org.xtext.example.conPlan.conPlan.Feature
import org.xtext.example.conPlan.conPlan.ConferenceDay
import java.util.Date
import java.text.SimpleDateFormat
import java.util.Calendar
import java.util.GregorianCalendar
import java.util.Locale
import org.xtext.example.conPlan.conPlan.Conference
import org.xtext.example.conPlan.conPlan.Model
import org.xtext.example.conPlan.conPlan.Rooms
import org.xtext.example.conPlan.conPlan.Talk
import org.eclipse.emf.ecore.EObject
import com.google.inject.Inject

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class ConPlanGenerator extends AbstractGenerator {
	@Inject extension ICalGenerator
	@Inject extension HTMLGenerator
	@Inject extension TalksDescGenerator
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(Greeting)
//				.map[name]
//				.join(', '))
		val model = resource.contents.head as Model
		val conferences  = EcoreUtil2.eAllOfType(model,Conference)
		val allTalks = EcoreUtil2.eAllOfType(model,Talks)
		for(c: conferences){
			val IcalName = c.name+".vcal"
			val HtmlName = c.name+".html"
//			fsa.generateFile(fName,compile(c))
			fsa.generateFile(IcalName,toICal(c))
			fsa.generateFile(HtmlName,model.toHTML)
		}
		for(t:allTalks){
			val HtmlName = t.name.replace(':','').replace('?','').replace(' ','').toLowerCase+".html"
			fsa.generateFile(HtmlName,t.toDescHTML)
		}

//		val filename = resource.URI.trimFileExtension.lastSegment+".vcal"
//		fsa.generateFile(filename,makeTheCode(model))
//		//model.objects	
	}
	
//	def makeTheCode(Model it)'''
//		«var conferences = EcoreUtil2.eAllOfType(it,Conference)»
//		«FOR c: conferences»
//			«c.compile»
//		«ENDFOR»
//	'''

//	def compile(Conference it) '''
//		BEGIN:VCALENDAR
//«««		VERSION: 2.0
//«««		PRODID: «System.hashCode»
//		«FOR day: days»
//			«day.compile»
//		«ENDFOR»		
//		END:VCALENDAR
//	'''
//	def monthParsing(ConferenceDay it)'''
//		«var itDate = new SimpleDateFormat("MMMM", Locale.ENGLISH).parse(month) »
//		«var cal = Calendar.getInstance()»
//		«cal.time = itDate»
//		«if (month !==null){
//			var iM = cal.get(Calendar.MONTH)
//			return iM
//		}»
//	'''
//	
//		def compile(ConferenceDay it)'''
//		«val slots= EcoreUtil2.eAllOfType(it, Slot)»
//		«var sf = new SimpleDateFormat("yyyyMMdd")»
//«««		«var sdf = new SimpleDateFormat("HH:mm")»
//«««		«val date = new Date()»
//		«var fs = new SimpleDateFormat("HHmmss")»
//		«FOR s : slots»
//		«var start = new GregorianCalendar»
//		«start.set(GregorianCalendar.DATE,Integer.parseInt(day))»
//		«start.set(GregorianCalendar.MONTH,Integer.parseInt(monthParsing.toString))»
//		«start.set(GregorianCalendar.YEAR, Integer.parseInt(year))»
//		«start.set(GregorianCalendar.HOUR_OF_DAY,Integer.parseInt(s.startHour))»
//		«start.set(GregorianCalendar.MINUTE,Integer.parseInt(s.startMin))»
//«««
//		«var end = new GregorianCalendar»
//		«end.set(GregorianCalendar.DATE,Integer.parseInt(day))»
//		«end.set(GregorianCalendar.MONTH,Integer.parseInt(monthParsing.toString))»
//		«end.set(GregorianCalendar.YEAR, Integer.parseInt(year))»
//		«end.set(GregorianCalendar.HOUR_OF_DAY,Integer.parseInt(s.endHour))»
//		«end.set(GregorianCalendar.MINUTE,Integer.parseInt(s.endMin))»
//		«IF s.name!==null»
//		BEGIN:VEVENT
//«««		DTSTART:«dateFormat(date)»
//		DTSTART:«sf.format(start.time)»T«fs.format(start.time)»
//		DTEND: «sf.format(end.time)»T«fs.format(end.time)»
//«««		DURATION: PT20M
//		SUMMARY: «s.name»
//		DESCRIPTION: 
//		«s.getRoom»
//		END:VEVENT
//		«ENDIF»
//		«FOR r : s.roomstalks»		
//		BEGIN:VEVENT
//		DTSTART:«sf.format(start.time)»T«fs.format(start.time)»
//		DTEND: «sf.format(end.time)»T«fs.format(end.time)»
//«««		DTSTART:«dateFormat(date)»
//«««		DURATION:PT45M
//		«r.compile»
//		END:VEVENT
//		«ENDFOR»
//		«ENDFOR»		
//	'''
//	def getRoom(Slot it)'''
//		«var allRooms= EcoreUtil2.eAllOfType(it,RoomsTalks)»
//		«FOR r: allRooms»
//		«IF r.room.name!==null»
//		LOCATION: «r.room.name»
//		«ENDIF»
//		«ENDFOR»
//«««		«for ( r:allRooms){
//«««			return r.room.name
//«««		}»
//	'''
//	def compile(RoomsTalks it)'''
//		«var allTalks = EcoreUtil2.eAllOfType(it,Talks)»
//«««		«IF (allTalks.add(it.talk))»
//		«IF (allTalks.add(it.talk))»
//		LOCATION: «room.name»
//		SUMMARY: «talk.name»
//		DESCRIPTION:«talk.description.name.toString»| «talk.getFeature»
//		«ENDIF»
//	'''
//	def dateFormat(Date date)'''
//		«var df = new SimpleDateFormat("yyyyMMdd")»
//		«var hf = new SimpleDateFormat("HHmmss")»
//		«if(date !=0){
//			df.format(date)+'T'+hf.format(date)
//		}»
//	'''
////	def dateFormatStart(Date date,ConferenceDay it,Slot s)'''
////«««		«var slots = EcoreUtil2.eAllOfType(it, Slot)»
////		«var itDate = new SimpleDateFormat("MMMM", Locale.ENGLISH).parse(month) »
////		«var cal = Calendar.getInstance()»
////		«cal.time = itDate»
////		«var iM = cal.get(Calendar.MONTH)»
////		«var cf = new SimpleDateFormat("yyyyMMdd")»
////		«var h = new SimpleDateFormat("HHmmss")»
////		«var calc = new GregorianCalendar()»
////		«calc.set(year,iM,day,s.start,s.end)»
////		« date.time = calc.time.time»
////		«cf.format(date)+'T'+h.format(date)»
////	'''
//	
////	def dateFormatEnd(Date date,ConferenceDay it, Slot s)'''
////		«var itDate = new SimpleDateFormat("MMMM", Locale.ENGLISH).parse(month) »
////		«var cal1 = Calendar.getInstance()»
////		«cal1.time = itDate»
////		«var iM = cal1.get(Calendar.MONTH)»
////		«var cf = new SimpleDateFormat("yyyyMMdd")»
////		«var h = new SimpleDateFormat("HHmmss")»
////«««		«cal1.set(year,iM,day,s.endHour,s.endMin)»
////		«val calc = new GregorianCalendar()»
////		«calc.set(year,iM,day,s.endHour,s.endMin)»
////		«date.time = calc.time.time»
////		«cf.format(date)+'T'+h.format(date)»
////	'''
//
//	def getDescriptions(Talks it)'''
//«««		«val URL = "https://www.eclipsecon.org/france2017/session/"»
//«««		DESCRIPTION:«URL»«it.name.replace(' ','-').toLowerCase»
//«««		DESCRITPION: «description.name»
//	'''
//	def getFeature(Talks it)'''
//		«var allFeatures = EcoreUtil2.eAllOfType(it,Feature)»
//		«var allSpeakers = EcoreUtil2.eAllOfType(it,Speaker)»
//		FEATURES: «FOR f : allFeatures»«f.name.toUpperCase»_«f.type.name» «ENDFOR»| SPEAKERS: «FOR s : allSpeakers»«s.name»«IF s.company !==null» (COMPANY: «s.company») «ENDIF»«ENDFOR»
//	'''
////	def getSpeakers(Talks it)'''
////		«var allSpeakers = EcoreUtil2.eAllOfType(it,Speaker)»
////		SPEAKERS: «FOR s : allSpeakers»«s.name»«IF s.company !==null» (COMPANY: «s.company») «ENDIF»«ENDFOR»
////	'''
////	def UID(Slot it)'''
////		«IF name!==null»		
////		«name.replace(' ','').substring(0,5).toLowerCase».AllRooms
////		«ENDIF»
////	'''
////	def UID (RoomsTalks it)'''
////		«talks.name.replace(' ','').substring(0,5).toLowerCase».«room.name.substring(0,2).toLowerCase»
////	'''
	
}
